declare module "intl-tel-input" {

  export interface IIntTelInputProps {
    /** Whether or not to allow the dropdown. If disabled, there is no dropdown arrow, and the selected flag is not clickable. Also we display the selected flag on the right instead because it is just a marker of state. */
    allowDropdown: boolean;
    /** If there is just a dial code in the input: remove it on blur or submit. This is to prevent just a dial code getting submitted with the form. Requires nationalMode to be set to false. */
    autoHideDialCode: boolean;
    /** Set the input's placeholder to an example number for the selected country, and update it if the country changes. You can specify the number type using the placeholderNumberType option. By default it is set to "polite", which means it will only set the placeholder if the input doesn't already have one. You can also set it to "aggressive", which will replace any existing placeholder, or "off". Requires the utilsScript option. */
    autoPlaceholder: string;
    /** Additional classes to add to the parent div. */
    customContainer: string;
    /** Change the placeholder generated by autoPlaceholder. Must return a string. */
    customPlaceholder: () => string;
    /** Expects a node e.g. document.body. Instead of putting the country dropdown next to the input, append it to the specified node, and it will then be positioned absolutely next to the input using JavaScript. This is useful when the input is inside a container with overflow: hidden. Note that the absolute positioning can be broken by scrolling, so it will automatically close on the window scroll event. */
    dropdownContainer: Node;
    /** In the dropdown, display all countries except the ones you specify here. */
    excludeCountries: string[];
    /** Format the input value (according to the nationalMode option) during initialisation, and on setNumber. Requires the utilsScript option. */
    formatOnDisplay: boolean;
    /** When setting initialCountry to "auto", you must use this option to specify a custom function that looks up the user's location, and then calls the success callback with the relevant country code. Also note that when instantiating the plugin, if the Promise object is defined, one of those is returned under the promise instance property, so you can do something like iti.promise.then(callback) to know when initialisation requests like this have completed. */
    geoIpLookup: () => void;
    /** Add a hidden input with the given name. Alternatively, if your input name contains square brackets (e.g. name="phone_number[main]") then it will give the hidden input the same name, replacing the contents of the brackets with the given name (e.g. if you init the plugin with hiddenInput: "full", then in this case the hidden input would have name="phone_number[full]"). On submit, it will automatically populate the hidden input with the full international number (using getNumber). This is a quick way for people using non-Ajax forms to get the full international number, even when nationalMode is enabled. Avoid this option when using Ajax forms and instead just call getNumber to get the full international number to send in the request. Note: requires the input to be inside a form element, as this feature works by listening for the submit event on the closest form element. Also note that since this uses getNumber internally, firstly it requires the utilsScript option, and secondly it expects a valid number and so should only be used after validation. */
    hiddenInput: string;
    /** Set the initial country selection by specifying its country code. You can also set it to "auto", which will lookup the user's country based on their IP address (requires the geoIpLookup option - see example). Note that the "auto" option will not update the country selection if the input already contains a number. If you leave initialCountry blank, it will default to the first country in the list. */
    initialCountry: string;
    /** Allows to translate the countries by its given iso code. */
    localizedCountries: object;
    /** Allow users to enter national numbers (and not have to think about international dial codes). Formatting, validation and placeholders still work. Then you can use getNumber to extract a full international number - see example. This option now defaults to true, and it is recommended that you leave it that way as it provides a better experience for the user. */
    nationalMode: boolean;
    /** In the dropdown, display only the countries you specify. */
    onlyCountries: string[];
    /** Specify one of the keys from the global enum intlTelInputUtils.numberType e.g. "FIXED_LINE" to set the number type to use for the placeholder. */
    placeholderNumberType: string;
    /** Specify the countries to appear at the top of the list. */
    preferredCountries: string[];
    /** Display the country dial code next to the selected flag so it's not part of the typed number. Note that this will disable nationalMode because technically we are dealing with international numbers, but with the dial code separated. */
    separateDialCode: boolean;
    /** nable formatting/validation etc. by specifying the URL of the included utils.js script (or alternatively just point it to the file on cdnjs.com). The script is fetched only when the page has finished loading (on the window load event) to prevent blocking (the script is ~215KB). When instantiating the plugin, if the Promise object is defined, one of those is returned under the promise instance property, so you can do something like iti.promise.then(callback) to know when initialisation requests like this have finished. See Utilities Script for more information. */
    utilsScript: string;
  }

  export default function IntTelInput(phoneInput: Node, props: IIntTelInputProps): any;
}